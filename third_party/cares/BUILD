package(default_visibility = ["//visibility:public"])

cc_library(
    name = "cares",
    srcs = [
        "c-ares/src/lib/ares_strerror.c",
        "c-ares/src/lib/ares_llist.c",
        "c-ares/src/lib/ares_parse_uri_reply.c",
        "c-ares/src/lib/ares_parse_soa_reply.c",
        "c-ares/src/lib/ares_parse_txt_reply.c",
        "c-ares/src/lib/ares_expand_string.c",
        "c-ares/src/lib/ares_getenv.c",
        "c-ares/src/lib/ares_send.c",
        "c-ares/src/lib/ares_getaddrinfo.c",
        "c-ares/src/lib/ares_strcasecmp.c",
        "c-ares/src/lib/ares_search.c",
        "c-ares/src/lib/ares_cancel.c",
        "c-ares/src/lib/ares_free_hostent.c",
        "c-ares/src/lib/ares_parse_ptr_reply.c",
        "c-ares/src/lib/ares_iphlpapi.h",
        "c-ares/src/lib/ares__get_hostent.c",
        "c-ares/src/lib/ares_setup.h",
        "c-ares/src/lib/ares_parse_caa_reply.c",
        "c-ares/src/lib/ares_android.c",
        "c-ares/src/lib/ares_llist.h",
        "c-ares/src/lib/config-dos.h",
        "c-ares/src/lib/ares_data.h",
        "c-ares/src/lib/ares__parse_into_addrinfo.c",
        "c-ares/src/lib/ares_timeout.c",
        "c-ares/src/lib/ares_options.c",
        "c-ares/src/lib/ares_writev.c",
        "c-ares/src/lib/ares_getnameinfo.c",
        "c-ares/src/lib/ares_library_init.c",
        "c-ares/src/lib/ares_destroy.c",
        "c-ares/src/lib/ares_strdup.c",
        "c-ares/src/lib/ares_getsock.c",
        "c-ares/src/lib/ares_parse_aaaa_reply.c",
        "c-ares/src/lib/ares_gethostbyname.c",
        "c-ares/src/lib/ares_ipv6.h",
        "c-ares/src/lib/config-win32.h",
        "c-ares/src/lib/ares_private.h",
        "c-ares/src/lib/ares_writev.h",
        "c-ares/src/lib/windows_port.c",
        "c-ares/src/lib/setup_once.h",
        "c-ares/src/lib/ares_mkquery.c",
        "c-ares/src/lib/ares__timeval.c",
        "c-ares/src/lib/bitncmp.c",
        "c-ares/src/lib/ares_expand_name.c",
        "c-ares/src/lib/ares_fds.c",
        "c-ares/src/lib/ares__addrinfo2hostent.c",
        "c-ares/src/lib/ares__readaddrinfo.c",
        "c-ares/src/lib/ares_strsplit.h",
        "c-ares/src/lib/ares_create_query.c",
        "c-ares/src/lib/ares_parse_ns_reply.c",
        "c-ares/src/lib/inet_ntop.c",
        "c-ares/src/lib/ares_parse_mx_reply.c",
        "c-ares/src/lib/ares_parse_naptr_reply.c",
        "c-ares/src/lib/ares_inet_net_pton.h",
        "c-ares/src/lib/ares_free_string.c",
        "c-ares/src/lib/ares_nowarn.h",
        "c-ares/src/lib/ares_platform.c",
        "c-ares/src/lib/inet_net_pton.c",
        "c-ares/src/lib/ares_strsplit.c",
        "c-ares/src/lib/ares_strcasecmp.h",
        "c-ares/src/lib/ares_version.c",
        "c-ares/src/lib/ares_getenv.h",
        "c-ares/src/lib/ares__addrinfo_localhost.c",
        "c-ares/src/lib/ares_parse_a_reply.c",
        "c-ares/src/lib/ares_nowarn.c",
        "c-ares/src/lib/ares__sortaddrinfo.c",
        "c-ares/src/lib/ares_data.c",
        "c-ares/src/lib/ares_init.c",
        "c-ares/src/lib/ares_gethostbyaddr.c",
        "c-ares/src/lib/ares__read_line.c",
        "c-ares/src/lib/ares_platform.h",
        "c-ares/src/lib/ares_strdup.h",
        "c-ares/src/lib/ares_freeaddrinfo.c",
        "c-ares/src/lib/ares_library_init.h",
        "c-ares/src/lib/ares_parse_srv_reply.c",
        "c-ares/src/lib/ares_query.c",
        "c-ares/src/lib/ares_android.h",
        "c-ares/src/lib/ares__close_sockets.c",
        "c-ares/src/lib/ares_process.c",
        "c-ares/src/lib/bitncmp.h",
    ] + select({
        "@bazel_tools//src/conditions:linux": [
            "linux/ares_build.h",
            "linux/ares_config.h",
        ],
        "@bazel_tools//src/conditions:windows": [
            "windows/ares_build.h",
            "windows/ares_config.h",
        ],
    }),
    hdrs = [
        "c-ares/include/ares.h",
        "c-ares/include/ares_dns.h",
        "c-ares/include/ares_nameser.h",
        "c-ares/include/ares_rules.h",
        "c-ares/include/ares_version.h",
    ],
    includes = ["c-ares/include"] + select({
        "@bazel_tools//src/conditions:linux": ["linux"],
        "@bazel_tools//src/conditions:windows": ["windows"],
    }),
    defines = [
        "CARES_STATICLIB",
        "HAVE_CONFIG_H",
    ],
    linkopts = select({
        "@bazel_tools//src/conditions:windows": ["-DEFAULTLIB:iphlpapi.lib"],
        "//conditions:default": [],
    }),
)
